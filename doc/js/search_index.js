var search_data = {"index":{"searchIndex":["graphqr","applyscopes","authorized","base","fields","basefield","pagination","paginationextension","paginationresolver","types","paginationpageinfotype","permittedfieldsextension","queryfield","scopeitems","after_resolve()","apply()","apply_scopes()","authorize_graphql()","authorized?()","current_company()","current_contract()","cursor_from_node()","edge_nodes()","edges()","new()","new()","nodes()","page_info()","pagination_type()","policy_provider()","pundit_user()","query_field()","resolve()","resolve()","resolve_field()","scope_items()","to_graphql()","code_of_conduct","gemfile","gemfile.lock","license","readme","rakefile","setup","graphqr.gemspec"],"longSearchIndex":["graphqr","graphqr::applyscopes","graphqr::authorized","graphqr::base","graphqr::fields","graphqr::fields::basefield","graphqr::pagination","graphqr::pagination::paginationextension","graphqr::pagination::paginationresolver","graphqr::pagination::types","graphqr::pagination::types::paginationpageinfotype","graphqr::permittedfieldsextension","graphqr::queryfield","graphqr::scopeitems","graphqr::pagination::paginationextension#after_resolve()","graphqr::pagination::paginationextension#apply()","graphqr::applyscopes#apply_scopes()","graphqr::base#authorize_graphql()","graphqr::authorized#authorized?()","graphqr::base#current_company()","graphqr::base#current_contract()","graphqr::pagination::paginationresolver#cursor_from_node()","graphqr::pagination::paginationresolver#edge_nodes()","graphqr::pagination::paginationresolver#edges()","graphqr::fields::basefield::new()","graphqr::pagination::paginationresolver::new()","graphqr::pagination::paginationresolver#nodes()","graphqr::pagination::paginationresolver#page_info()","graphqr::pagination#pagination_type()","graphqr::base#policy_provider()","graphqr::base#pundit_user()","graphqr::queryfield#query_field()","graphqr::pagination::paginationextension#resolve()","graphqr::permittedfieldsextension#resolve()","graphqr::fields::basefield#resolve_field()","graphqr::scopeitems#scope_items()","graphqr::fields::basefield#to_graphql()","","","","","","","",""],"info":[["GraphQR","","GraphQR.html","","<p>This module represents all the extensions we made to the graphql-ruby library\nit contains helpers and ...\n"],["GraphQR::ApplyScopes","","GraphQR/ApplyScopes.html","","<p>The ApplyScopes module defines a way of applying model scopes in the GraphQL universe\nit is based on ...\n"],["GraphQR::Authorized","","GraphQR/Authorized.html","",""],["GraphQR::Base","","GraphQR/Base.html","","<p>The Base module defines some helper methods that can be used once it is included\nit also includes the ...\n"],["GraphQR::Fields","","GraphQR/Fields.html","","<p>This module represents all the extensions we made to the basic GraphQL::Schema::Field class\nit contains ...\n"],["GraphQR::Fields::BaseField","","GraphQR/Fields/BaseField.html","","<p>The BaseField class rewrites the field initialization, adding some options that could be helpful:\n<p>show …\n"],["GraphQR::Pagination","","GraphQR/Pagination.html","",""],["GraphQR::Pagination::PaginationExtension","","GraphQR/Pagination/PaginationExtension.html","",""],["GraphQR::Pagination::PaginationResolver","","GraphQR/Pagination/PaginationResolver.html","",""],["GraphQR::Pagination::Types","","GraphQR/Pagination/Types.html","",""],["GraphQR::Pagination::Types::PaginationPageInfoType","","GraphQR/Pagination/Types/PaginationPageInfoType.html","",""],["GraphQR::PermittedFieldsExtension","","GraphQR/PermittedFieldsExtension.html","",""],["GraphQR::QueryField","","GraphQR/QueryField.html","",""],["GraphQR::ScopeItems","","GraphQR/ScopeItems.html","",""],["after_resolve","GraphQR::Pagination::PaginationExtension","GraphQR/Pagination/PaginationExtension.html#method-i-after_resolve","(value:, arguments:, **_kwargs)",""],["apply","GraphQR::Pagination::PaginationExtension","GraphQR/Pagination/PaginationExtension.html#method-i-apply","()",""],["apply_scopes","GraphQR::ApplyScopes","GraphQR/ApplyScopes.html#method-i-apply_scopes","(target, scopes)","<p>This method is a parallel to the one offerend by the <code>has_scope</code> gem.\nA big difference in this case is ...\n"],["authorize_graphql","GraphQR::Base","GraphQR/Base.html#method-i-authorize_graphql","(record, action, policy_class: nil)","<p>This method is a wrapper around the Pundit authorize, receiving the same arguments.\nThe only difference ...\n"],["authorized?","GraphQR::Authorized","GraphQR/Authorized.html#method-i-authorized-3F","(object, context)",""],["current_company","GraphQR::Base","GraphQR/Base.html#method-i-current_company","()","<p>This is a helper method to get the current company from the context\n"],["current_contract","GraphQR::Base","GraphQR/Base.html#method-i-current_contract","()","<p>This is a helper method to get the current contract from the context\n"],["cursor_from_node","GraphQR::Pagination::PaginationResolver","GraphQR/Pagination/PaginationResolver.html#method-i-cursor_from_node","(item)",""],["edge_nodes","GraphQR::Pagination::PaginationResolver","GraphQR/Pagination/PaginationResolver.html#method-i-edge_nodes","()",""],["edges","GraphQR::Pagination::PaginationResolver","GraphQR/Pagination/PaginationResolver.html#method-i-edges","()",""],["new","GraphQR::Fields::BaseField","GraphQR/Fields/BaseField.html#method-c-new","(*args, show: default_show_proc, authorize: nil, pundit_record: nil, policy_class: nil, paginate: false, **kwargs, &block)","<p>rubocop:disable Metrics/ParameterLists\n"],["new","GraphQR::Pagination::PaginationResolver","GraphQR/Pagination/PaginationResolver.html#method-c-new","(records, arguments)",""],["nodes","GraphQR::Pagination::PaginationResolver","GraphQR/Pagination/PaginationResolver.html#method-i-nodes","()",""],["page_info","GraphQR::Pagination::PaginationResolver","GraphQR/Pagination/PaginationResolver.html#method-i-page_info","()",""],["pagination_type","GraphQR::Pagination","GraphQR/Pagination.html#method-i-pagination_type","()",""],["policy_provider","GraphQR::Base","GraphQR/Base.html#method-i-policy_provider","()","<p>This is a helper method to get the policy provider from the context\n"],["pundit_user","GraphQR::Base","GraphQR/Base.html#method-i-pundit_user","()","<p>This is a helper method to get the pundit user from the context\nThe pundit user is needed for Pundit ...\n"],["query_field","GraphQR::QueryField","GraphQR/QueryField.html#method-i-query_field","(field_name, active_record_class, type_class:, scope_class: nil, **kwargs, &block)",""],["resolve","GraphQR::Pagination::PaginationExtension","GraphQR/Pagination/PaginationExtension.html#method-i-resolve","(object:, arguments:, **_kwargs)","<p>Remove pagination args before passing it to a user method\n"],["resolve","GraphQR::PermittedFieldsExtension","GraphQR/PermittedFieldsExtension.html#method-i-resolve","(object:, arguments:, context:)",""],["resolve_field","GraphQR::Fields::BaseField","GraphQR/Fields/BaseField.html#method-i-resolve_field","(obj, args, ctx)","<p>This method adds the show/authorize logic to the field resolution.\nIt returns the new resolved field. ...\n"],["scope_items","GraphQR::ScopeItems","GraphQR/ScopeItems.html#method-i-scope_items","(items, context)",""],["to_graphql","GraphQR::Fields::BaseField","GraphQR/Fields/BaseField.html#method-i-to_graphql","()","<p>This adds metadata to the Object, indicating the custom options used.\n"],["CODE_OF_CONDUCT","","CODE_OF_CONDUCT_md.html","","<p>Contributor Covenant Code of Conduct\n<p>Our Pledge\n<p>In the interest of fostering an open and welcoming environment, …\n"],["Gemfile","","Gemfile.html","","<p># frozen_string_literal: true\n<p>source &#39;rubygems.org&#39;\n<p>git_source(:github) { |repo_name| “github.com/#{repo_name …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  graphqr (0.0.1)</pre>\n<p>GEM\n"],["LICENSE","","LICENSE_txt.html","","<p>The MIT License (MIT)\n<p>Copyright © 2019 Manuel Puyol\n<p>Permission is hereby granted, free of charge, to …\n"],["README","","README_md.html","","<p>GraphQR\n<p>Welcome to your new gem! In this directory, you&#39;ll find the files you need to be able to package …\n"],["Rakefile","","Rakefile.html","","<p># frozen_string_literal: true\n<p>require &#39;bundler/gem_tasks&#39; require &#39;rspec/core/rake_task&#39; …\n"],["setup","","bin/setup.html","","<p>#!/usr/bin/env bash set -euo pipefail IFS=$&#39;nt&#39; set -vx\n<p>bundle install\n<p># Do any other automated …\n"],["graphqr.gemspec","","graphqr_gemspec.html","","<p># frozen_string_literal: true\n<p>lib = File.expand_path(&#39;lib&#39;, __dir__) $LOAD_PATH.unshift(lib) unless …\n"]]}}